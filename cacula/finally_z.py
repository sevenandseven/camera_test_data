
import math

# 第一组数据x坐标的误差
x1 =  ['5.599999999999909', '26.0', '13.5', '7.650000000000091', '20.149999999999864', '23.399999999999864', '12.050000000000182', '32.549999999999955', '33.950000000000045', '27.950000000000045', '32.450000000000045', '30.300000000000182', '36.049999999999955', '33.100000000000136', '27.65000000000009', '23.049999999999955', '33.34999999999991', '39.049999999999955', '25.59999999999991', '19.200000000000045', '18.09999999999991', '24.09999999999991', '-7.75', '-7.75', '7.699999999999818', '5.9500000000000455', '-4.100000000000136', '-4.100000000000136', '18.0', '3.3500000000001364', '6.100000000000136', '4.7000000000000455', '-8.5', '-6.9500000000000455', '6.099999999999909', '12.949999999999818', '6.25', '-5.0', '1.5499999999999545', '8.549999999999955', '10.850000000000136', '6.0', '8.400000000000091', '3.2999999999999545', '19.649999999999864', '3.9500000000000455', '8.450000000000045', '1.0499999999999545']
# 第二组数据x的误差
x2 = ['-8.75', '32.19999999999982', '24.449999999999818', '57.34999999999991', '46.90000000000009', '-44.649999999999864', '187.75000000000023', '77.59999999999991', '187.750000000000235', '2098.0', '893.5500000000001', '97.54999999999995', '157.04999999999995', '-6.350000000000136', '25.34999999999991', '62.05000000000018', '37.850000000000136', '17.5', '53.65000000000009', '44.25']
# 第三组x的误差
x3 = ['56.94999999999982', '16.899999999999864', '16.299999999999955', '15.850000000000136', '28.799999999999955', '-11.200000000000045', '17.84999999999991', '16.65000000000009']

# 对列表中的每个值平方之后求和
sum_of_squares = sum([(float(num)*0.1) ** 2 for num in x1])

print(sum_of_squares)
# ave = math.sqrt(sum_of_squares / len(x1) )
# print(ave)
# 对列表中的每个值平方之后求和
sum_of_squares2 = sum([(float(num)*0.1) ** 2 for num in x2])
print(sum_of_squares2)
# x2_sum = sum(x2_subtracted_squared)

sum_of_squares3 = sum([(float(num)*0.1) ** 2 for num in x3])
print(sum_of_squares3)

n = len(x1) + len(x2) + len(x3)
# print(x3_subtracted_squared)
sum_all = sum_of_squares + sum_of_squares2 + sum_of_squares3
print(sum_of_squares)

# 和（真实值和预测值的插值 平方  * 0.1转换为cm）  除以总数 开根号
ave = math.sqrt(sum_all / len(x1) )
print(ave)
