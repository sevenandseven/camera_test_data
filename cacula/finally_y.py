
import math

# 第一组数据x坐标的误差
x1 =  ['-0.5154307083154208', '-8.258898638586288', '-4.52249077557093', '-3.4690907880873', '-4.52336889357457', '-3.6706211868632863', '-2.352702425156224', '-4.51265302878852', '-6.578009935236253', '-2.523173598553967', '-6.406702101652513', '-2.1321684821347446', '-3.2762705615951973', '-1.063380761007764', '-0.0668722642322166', '-3.1757707327469404', '-3.259630569734668', '-4.895544544915367', '0.4042577279256818', '-0.8298694581202994', '-0.669892321025074', '-6.753691661947187', '-3.051327826301076', '-3.051327826301076', '-9.11009642161605', '-5.483034708918126', '-6.669922784520168', '-6.669922784520168', '-7.933036457322828', '-4.74909380869633', '-6.034208603212733', '-6.926276761738052', '-8.560605629681447', '-6.262877092334179', '-10.973436286157266', '-9.553649262990234', '-10.038901731015983', '-5.809262403285032', '-6.643034937825291', '-7.349891274280537', '-8.721546357234786', '-7.518596636526752', '-9.785247665802217', '-7.94026325217196', '-8.550441535094421', '-6.339748286379574', '-5.2305638965317485', '-6.295554275766989']
# 第二组数据x的误差
x2 = ['-0.7733955017311214', '-1.017206910495048', '1.7797392689092248', '-2.0169465774636706', '0.036079539852527986', '5.05163701181587', '-15.580034326992575', '-6.731031262969395', '-15.580034326992575', '-19.21603476575414', '-76.55162721546371', '-3.6564550094971224', '-1.496205631487907', '0.7187557643344942', '1.5772834366104442', '-3.9133704929368207', '-0.7920615803178848', '-0.13454571493881495', '-3.2067086241270033', '-1.4695939815946697']
# 第三组x的误差
x3 = ['-4.073336816697818', '-0.01053328491349248', '2.761778450112061', '-4.622578804270006', '-0.5827845192768564', '-1.272992400512834', '0.19919251225908852', '-5.897592068703233']


# 对列表中的每个值平方之后求和
sum_of_squares = sum([(float(num)*0.1) ** 2 for num in x1])

print(sum_of_squares)
# ave = math.sqrt(sum_of_squares / len(x1) )
# print(ave)
# 对列表中的每个值平方之后求和
sum_of_squares2 = sum([(float(num)*0.1) ** 2 for num in x2])
print(sum_of_squares2)
# x2_sum = sum(x2_subtracted_squared)

sum_of_squares3 = sum([(float(num)*0.1) ** 2 for num in x3])
print(sum_of_squares3)

n = len(x1) + len(x2) + len(x3)
# print(x3_subtracted_squared)
sum_all = sum_of_squares + sum_of_squares2 + sum_of_squares3
print(sum_of_squares)

# 和（真实值和预测值的插值 平方  * 0.1转换为cm）  除以总数 开根号
ave = math.sqrt(sum_all / len(x1) )
print(ave)
